8e53bb6c96e61c1fb1f4ad4fdf3909be
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "defaultStyles", {
  enumerable: true,
  get: function get() {
    return _styles.defaultStyles;
  }
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = _interopRequireDefault(require("lodash.isequal"));

var _styles = require("./styles");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var RNPickerSelect = function (_PureComponent) {
  (0, _inherits2.default)(RNPickerSelect, _PureComponent);

  var _super = _createSuper(RNPickerSelect);

  (0, _createClass2.default)(RNPickerSelect, null, [{
    key: "handlePlaceholder",
    value: function handlePlaceholder(_ref) {
      var placeholder = _ref.placeholder;

      if ((0, _lodash.default)(placeholder, {})) {
        return [];
      }

      return [placeholder];
    }
  }, {
    key: "getSelectedItem",
    value: function getSelectedItem(_ref2) {
      var items = _ref2.items,
          key = _ref2.key,
          value = _ref2.value;
      var idx = items.findIndex(function (item) {
        if (item.key && key) {
          return (0, _lodash.default)(item.key, key);
        }

        return (0, _lodash.default)(item.value, value);
      });

      if (idx === -1) {
        idx = 0;
      }

      return {
        selectedItem: items[idx] || {},
        idx: idx
      };
    }
  }, {
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var items = RNPickerSelect.handlePlaceholder({
        placeholder: nextProps.placeholder
      }).concat(nextProps.items);
      var itemsChanged = !(0, _lodash.default)(prevState.items, items);

      var _RNPickerSelect$getSe = RNPickerSelect.getSelectedItem({
        items: items,
        key: nextProps.itemKey,
        value: nextProps.value
      }),
          selectedItem = _RNPickerSelect$getSe.selectedItem,
          idx = _RNPickerSelect$getSe.idx;

      var selectedItemChanged = !(0, _lodash.default)(nextProps.value, undefined) && !(0, _lodash.default)(prevState.selectedItem, selectedItem);

      if (itemsChanged || selectedItemChanged) {
        if (selectedItemChanged) {
          nextProps.onValueChange(selectedItem.value, idx);
        }

        return _objectSpread({}, itemsChanged ? {
          items: items
        } : {}, {}, selectedItemChanged ? {
          selectedItem: selectedItem
        } : {});
      }

      return null;
    }
  }]);

  function RNPickerSelect(props) {
    var _this;

    (0, _classCallCheck2.default)(this, RNPickerSelect);
    _this = _super.call(this, props);
    var items = RNPickerSelect.handlePlaceholder({
      placeholder: props.placeholder
    }).concat(props.items);

    var _RNPickerSelect$getSe2 = RNPickerSelect.getSelectedItem({
      items: items,
      key: props.itemKey,
      value: props.value
    }),
        selectedItem = _RNPickerSelect$getSe2.selectedItem;

    _this.state = {
      items: items,
      selectedItem: selectedItem,
      showPicker: false,
      animationType: undefined,
      orientation: 'portrait',
      doneDepressed: false
    };
    _this.onUpArrow = _this.onUpArrow.bind((0, _assertThisInitialized2.default)(_this));
    _this.onDownArrow = _this.onDownArrow.bind((0, _assertThisInitialized2.default)(_this));
    _this.onValueChange = _this.onValueChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.onOrientationChange = _this.onOrientationChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.setInputRef = _this.setInputRef.bind((0, _assertThisInitialized2.default)(_this));
    _this.togglePicker = _this.togglePicker.bind((0, _assertThisInitialized2.default)(_this));
    _this.renderInputAccessoryView = _this.renderInputAccessoryView.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(RNPickerSelect, [{
    key: "onUpArrow",
    value: function onUpArrow() {
      var onUpArrow = this.props.onUpArrow;
      this.togglePicker(false, onUpArrow);
    }
  }, {
    key: "onDownArrow",
    value: function onDownArrow() {
      var onDownArrow = this.props.onDownArrow;
      this.togglePicker(false, onDownArrow);
    }
  }, {
    key: "onValueChange",
    value: function onValueChange(value, index) {
      var onValueChange = this.props.onValueChange;
      onValueChange(value, index);
      this.setState(function (prevState) {
        return {
          selectedItem: prevState.items[index]
        };
      });
    }
  }, {
    key: "onOrientationChange",
    value: function onOrientationChange(_ref3) {
      var nativeEvent = _ref3.nativeEvent;
      this.setState({
        orientation: nativeEvent.orientation
      });
    }
  }, {
    key: "setInputRef",
    value: function setInputRef(ref) {
      this.inputRef = ref;
    }
  }, {
    key: "getPlaceholderStyle",
    value: function getPlaceholderStyle() {
      var _this$props = this.props,
          placeholder = _this$props.placeholder,
          style = _this$props.style;
      var selectedItem = this.state.selectedItem;

      if (!(0, _lodash.default)(placeholder, {}) && selectedItem.label === placeholder.label) {
        return _objectSpread({}, _styles.defaultStyles.placeholder, {}, style.placeholder);
      }

      return {};
    }
  }, {
    key: "triggerOpenCloseCallbacks",
    value: function triggerOpenCloseCallbacks() {
      var _this$props2 = this.props,
          onOpen = _this$props2.onOpen,
          onClose = _this$props2.onClose;
      var showPicker = this.state.showPicker;

      if (!showPicker && onOpen) {
        onOpen();
      }

      if (showPicker && onClose) {
        onClose();
      }
    }
  }, {
    key: "togglePicker",
    value: function togglePicker() {
      var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var postToggleCallback = arguments.length > 1 ? arguments[1] : undefined;
      var _this$props3 = this.props,
          modalProps = _this$props3.modalProps,
          disabled = _this$props3.disabled;
      var showPicker = this.state.showPicker;

      if (disabled) {
        return;
      }

      if (!showPicker) {
        _reactNative.Keyboard.dismiss();
      }

      var animationType = modalProps && modalProps.animationType ? modalProps.animationType : 'slide';
      this.triggerOpenCloseCallbacks();
      this.setState(function (prevState) {
        return {
          animationType: animate ? animationType : undefined,
          showPicker: !prevState.showPicker
        };
      }, function () {
        if (postToggleCallback) {
          postToggleCallback();
        }
      });
    }
  }, {
    key: "renderPickerItems",
    value: function renderPickerItems() {
      var items = this.state.items;
      return items.map(function (item) {
        return _react.default.createElement(_reactNative.Picker.Item, {
          label: item.label,
          value: item.value,
          key: item.key || item.label,
          color: item.color
        });
      });
    }
  }, {
    key: "renderInputAccessoryView",
    value: function renderInputAccessoryView() {
      var _this2 = this;

      var _this$props4 = this.props,
          InputAccessoryView = _this$props4.InputAccessoryView,
          doneText = _this$props4.doneText,
          onUpArrow = _this$props4.onUpArrow,
          onDownArrow = _this$props4.onDownArrow,
          onDonePress = _this$props4.onDonePress,
          style = _this$props4.style,
          touchableDoneProps = _this$props4.touchableDoneProps;
      var doneDepressed = this.state.doneDepressed;

      if (InputAccessoryView) {
        return _react.default.createElement(InputAccessoryView, {
          testID: "custom_input_accessory_view"
        });
      }

      return _react.default.createElement(_reactNative.View, {
        style: [_styles.defaultStyles.modalViewMiddle, style.modalViewMiddle],
        testID: "input_accessory_view"
      }, _react.default.createElement(_reactNative.View, {
        style: [_styles.defaultStyles.chevronContainer, style.chevronContainer]
      }, _react.default.createElement(_reactNative.TouchableOpacity, {
        activeOpacity: onUpArrow ? 0.5 : 1,
        onPress: onUpArrow ? this.onUpArrow : null
      }, _react.default.createElement(_reactNative.View, {
        style: [_styles.defaultStyles.chevron, style.chevron, _styles.defaultStyles.chevronUp, style.chevronUp, onUpArrow ? [_styles.defaultStyles.chevronActive, style.chevronActive] : {}]
      })), _react.default.createElement(_reactNative.TouchableOpacity, {
        activeOpacity: onDownArrow ? 0.5 : 1,
        onPress: onDownArrow ? this.onDownArrow : null
      }, _react.default.createElement(_reactNative.View, {
        style: [_styles.defaultStyles.chevron, style.chevron, _styles.defaultStyles.chevronDown, style.chevronDown, onDownArrow ? [_styles.defaultStyles.chevronActive, style.chevronActive] : {}]
      }))), _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({
        testID: "done_button",
        onPress: function onPress() {
          _this2.togglePicker(true, onDonePress);
        },
        onPressIn: function onPressIn() {
          _this2.setState({
            doneDepressed: true
          });
        },
        onPressOut: function onPressOut() {
          _this2.setState({
            doneDepressed: false
          });
        },
        hitSlop: {
          top: 4,
          right: 4,
          bottom: 4,
          left: 4
        }
      }, touchableDoneProps), _react.default.createElement(_reactNative.View, {
        testID: "needed_for_touchable"
      }, _react.default.createElement(_reactNative.Text, {
        testID: "done_text",
        allowFontScaling: false,
        style: [_styles.defaultStyles.done, style.done, doneDepressed ? [_styles.defaultStyles.doneDepressed, style.doneDepressed] : {}]
      }, doneText))));
    }
  }, {
    key: "renderIcon",
    value: function renderIcon() {
      var _this$props5 = this.props,
          style = _this$props5.style,
          Icon = _this$props5.Icon;

      if (!Icon) {
        return null;
      }

      return _react.default.createElement(_reactNative.View, {
        testID: "icon_container",
        style: [_styles.defaultStyles.iconContainer, style.iconContainer]
      }, _react.default.createElement(Icon, {
        testID: "icon"
      }));
    }
  }, {
    key: "renderTextInputOrChildren",
    value: function renderTextInputOrChildren() {
      var _this$props6 = this.props,
          children = _this$props6.children,
          style = _this$props6.style,
          textInputProps = _this$props6.textInputProps;
      var selectedItem = this.state.selectedItem;
      var containerStyle = _reactNative.Platform.OS === 'ios' ? style.inputIOSContainer : style.inputAndroidContainer;

      if (children) {
        return _react.default.createElement(_reactNative.View, {
          pointerEvents: "box-only",
          style: containerStyle
        }, children);
      }

      return _react.default.createElement(_reactNative.View, {
        pointerEvents: "box-only",
        style: containerStyle
      }, _react.default.createElement(_reactNative.TextInput, (0, _extends2.default)({
        testID: "text_input",
        style: [_reactNative.Platform.OS === 'ios' ? style.inputIOS : style.inputAndroid, this.getPlaceholderStyle()],
        value: selectedItem.displayValue ? selectedItem.value : selectedItem.label,
        ref: this.setInputRef,
        editable: false
      }, textInputProps)), this.renderIcon());
    }
  }, {
    key: "renderIOS",
    value: function renderIOS() {
      var _this3 = this;

      var _this$props7 = this.props,
          style = _this$props7.style,
          modalProps = _this$props7.modalProps,
          pickerProps = _this$props7.pickerProps,
          touchableWrapperProps = _this$props7.touchableWrapperProps;
      var _this$state = this.state,
          animationType = _this$state.animationType,
          orientation = _this$state.orientation,
          selectedItem = _this$state.selectedItem,
          showPicker = _this$state.showPicker;
      return _react.default.createElement(_reactNative.View, {
        style: [_styles.defaultStyles.viewContainer, style.viewContainer]
      }, _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({
        testID: "ios_touchable_wrapper",
        onPress: function onPress() {
          _this3.togglePicker(true);
        },
        activeOpacity: 1
      }, touchableWrapperProps), this.renderTextInputOrChildren()), _react.default.createElement(_reactNative.Modal, (0, _extends2.default)({
        testID: "ios_modal",
        visible: showPicker,
        transparent: true,
        animationType: animationType,
        supportedOrientations: ['portrait', 'landscape'],
        onOrientationChange: this.onOrientationChange
      }, modalProps), _react.default.createElement(_reactNative.TouchableOpacity, {
        style: [_styles.defaultStyles.modalViewTop, style.modalViewTop],
        testID: "ios_modal_top",
        onPress: function onPress() {
          _this3.togglePicker(true);
        }
      }), this.renderInputAccessoryView(), _react.default.createElement(_reactNative.View, {
        style: [_styles.defaultStyles.modalViewBottom, {
          height: orientation === 'portrait' ? 215 : 162
        }, style.modalViewBottom]
      }, _react.default.createElement(_reactNative.Picker, (0, _extends2.default)({
        testID: "ios_picker",
        onValueChange: this.onValueChange,
        selectedValue: selectedItem.value
      }, pickerProps), this.renderPickerItems()))));
    }
  }, {
    key: "renderAndroidHeadless",
    value: function renderAndroidHeadless() {
      var _this$props8 = this.props,
          disabled = _this$props8.disabled,
          Icon = _this$props8.Icon,
          style = _this$props8.style,
          pickerProps = _this$props8.pickerProps,
          onOpen = _this$props8.onOpen,
          touchableWrapperProps = _this$props8.touchableWrapperProps;
      var selectedItem = this.state.selectedItem;
      return _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({
        testID: "android_touchable_wrapper",
        onPress: onOpen,
        activeOpacity: 1
      }, touchableWrapperProps), _react.default.createElement(_reactNative.View, {
        style: style.headlessAndroidContainer
      }, this.renderTextInputOrChildren(), _react.default.createElement(_reactNative.Picker, (0, _extends2.default)({
        style: [Icon ? {
          backgroundColor: 'transparent'
        } : {}, _styles.defaultStyles.headlessAndroidPicker, style.headlessAndroidPicker],
        testID: "android_picker_headless",
        enabled: !disabled,
        onValueChange: this.onValueChange,
        selectedValue: selectedItem.value
      }, pickerProps), this.renderPickerItems())));
    }
  }, {
    key: "renderAndroidNativePickerStyle",
    value: function renderAndroidNativePickerStyle() {
      var _this$props9 = this.props,
          disabled = _this$props9.disabled,
          Icon = _this$props9.Icon,
          style = _this$props9.style,
          pickerProps = _this$props9.pickerProps;
      var selectedItem = this.state.selectedItem;
      return _react.default.createElement(_reactNative.View, {
        style: [_styles.defaultStyles.viewContainer, style.viewContainer]
      }, _react.default.createElement(_reactNative.Picker, (0, _extends2.default)({
        style: [Icon ? {
          backgroundColor: 'transparent'
        } : {}, style.inputAndroid, this.getPlaceholderStyle()],
        testID: "android_picker",
        enabled: !disabled,
        onValueChange: this.onValueChange,
        selectedValue: selectedItem.value
      }, pickerProps), this.renderPickerItems()), this.renderIcon());
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props10 = this.props,
          children = _this$props10.children,
          useNativeAndroidPickerStyle = _this$props10.useNativeAndroidPickerStyle;

      if (_reactNative.Platform.OS === 'ios') {
        return this.renderIOS();
      }

      if (children || !useNativeAndroidPickerStyle) {
        return this.renderAndroidHeadless();
      }

      return this.renderAndroidNativePickerStyle();
    }
  }]);
  return RNPickerSelect;
}(_react.PureComponent);

exports.default = RNPickerSelect;
RNPickerSelect.propTypes = {
  onValueChange: _propTypes.default.func.isRequired,
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    label: _propTypes.default.string.isRequired,
    value: _propTypes.default.any.isRequired,
    key: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    color: _propTypes.default.string,
    displayValue: _propTypes.default.bool
  })).isRequired,
  value: _propTypes.default.any,
  placeholder: _propTypes.default.shape({
    label: _propTypes.default.string,
    value: _propTypes.default.any,
    key: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    color: _propTypes.default.string
  }),
  disabled: _propTypes.default.bool,
  itemKey: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  style: _propTypes.default.shape({}),
  children: _propTypes.default.any,
  onOpen: _propTypes.default.func,
  useNativeAndroidPickerStyle: _propTypes.default.bool,
  doneText: _propTypes.default.string,
  onDonePress: _propTypes.default.func,
  onUpArrow: _propTypes.default.func,
  onDownArrow: _propTypes.default.func,
  onClose: _propTypes.default.func,
  modalProps: _propTypes.default.shape({}),
  textInputProps: _propTypes.default.shape({}),
  pickerProps: _propTypes.default.shape({}),
  touchableDoneProps: _propTypes.default.shape({}),
  touchableWrapperProps: _propTypes.default.shape({}),
  Icon: _propTypes.default.func,
  InputAccessoryView: _propTypes.default.func
};
RNPickerSelect.defaultProps = {
  value: undefined,
  placeholder: {
    label: 'Select an item...',
    value: null,
    color: '#9EA0A4'
  },
  disabled: false,
  itemKey: null,
  style: {},
  children: null,
  useNativeAndroidPickerStyle: true,
  doneText: 'Done',
  onDonePress: null,
  onUpArrow: null,
  onDownArrow: null,
  onOpen: null,
  onClose: null,
  modalProps: {},
  textInputProps: {},
  pickerProps: {},
  touchableDoneProps: {},
  touchableWrapperProps: {},
  Icon: null,
  InputAccessoryView: null
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,