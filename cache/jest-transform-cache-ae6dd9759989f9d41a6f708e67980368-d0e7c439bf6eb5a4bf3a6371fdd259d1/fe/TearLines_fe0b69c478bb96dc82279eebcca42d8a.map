{"version":3,"sources":["TearLines.js"],"names":["DEFAULT_TEAR_SIZE","DEFAULT_TEAR_COLOR","DEFAULT_BACKGROUND_COLOR","TearLines","props","state","width","onLayout","bind","undefined","setState","event","nativeEvent","layout","margin","tearSize","styles","container","isUnder","marginTop","marginBottom","style","ends","leftEnds","height","backgroundColor","marginRight","offset","Array","tiles","fill","map","e","i","tear","color","rightEnds","marginLeft","Math","ceil","_rawTiles","React","Component","propTypes","PropTypes","bool","number","string","StyleSheet","create","flexDirection","alignItems","justifyContent","alignSelf","overflow","elevation","transform","rotate","zIndex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {View, StyleSheet} from 'react-native';\nimport PropTypes from 'prop-types';\n\n// defaults\nconst DEFAULT_TEAR_SIZE = 10;\nconst DEFAULT_TEAR_COLOR = '#FFFFFF';\nconst DEFAULT_BACKGROUND_COLOR = '#CCCCCC';\n\nexport default class TearLines extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n    };\n\n    // bindings\n    this.onLayout = this.onLayout.bind(this);\n  }\n\n  componentDidMount() {\n    // allow width to be passed in via props too if not\n    // dynamically calculated by onLayout\n    if (this.props.width !== undefined) {\n      this.setState({width: this.props.width});\n    }\n  }\n\n  onLayout(event) {\n    this.setState({width: event.nativeEvent.layout.width});\n  }\n\n  get tiles() {\n    return Math.ceil(this._rawTiles);\n  }\n\n  get _rawTiles() {\n    return this.state.width / (this.props.tearSize || DEFAULT_TEAR_SIZE);\n  }\n\n  get offset() {\n    return (\n      ((this.tiles - this._rawTiles) *\n        (this.props.tearSize || DEFAULT_TEAR_SIZE)) /\n      2\n    );\n  }\n\n  render() {\n    // used to offset the tear lines halfway under\n    // the \"attached container\"\n    const margin = (-(this.props.tearSize || DEFAULT_TEAR_SIZE) * 1.5) / 2;\n    return (\n      <View\n        style={[\n          styles.container,\n          this.props.isUnder\n            ? {\n                marginTop: margin,\n              }\n            : {\n                marginBottom: margin,\n              },\n          this.props.style,\n        ]}>\n        <View\n          style={[\n            styles.ends,\n            styles.leftEnds,\n            this.props.tearSize && {\n              width: this.props.tearSize,\n              height: this.props.tearSize * 1.5,\n            },\n            this.props.backgroundColor && {\n              backgroundColor: this.props.backgroundColor,\n            },\n            {\n              marginRight: -this.offset,\n            },\n          ]}\n        />\n        {new Array(this.tiles).fill().map((e, i) => (\n          <View\n            key={`tear-${i}`}\n            style={[\n              styles.tear,\n              this.props.tearSize && {\n                width: this.props.tearSize,\n                height: this.props.tearSize,\n              },\n              this.props.color && {\n                backgroundColor: this.props.color,\n              },\n            ]}\n          />\n        ))}\n        <View\n          style={[\n            styles.ends,\n            styles.rightEnds,\n            this.props.tearSize && {\n              width: this.props.tearSize,\n              height: this.props.tearSize * 1.5,\n            },\n            this.props.backgroundColor && {\n              backgroundColor: this.props.backgroundColor,\n            },\n            {\n              marginLeft: -this.offset,\n            },\n          ]}\n        />\n      </View>\n    );\n  }\n}\n\nTearLines.propTypes = {\n  // default is tears facing up, isUnder will invert (used\n  // at buttom of attached container)\n  isUnder: PropTypes.bool,\n\n  // sizes of each individual diagonal tear\n  tearSize: PropTypes.number,\n\n  // should match the foreground of attached container\n  color: PropTypes.string,\n\n  // should match the background for the TearLines\n  backgroundColor: PropTypes.string,\n\n  // generally not used, as width should be calculated\n  // on the fly with onLayout\n  width: PropTypes.number,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    alignSelf: 'center',\n    overflow: 'hidden',\n    elevation: 100,\n\n    // under attached container\n    // zIndex: -1\n  },\n\n  tear: {\n    width: DEFAULT_TEAR_SIZE,\n    height: DEFAULT_TEAR_SIZE,\n    backgroundColor: DEFAULT_TEAR_COLOR,\n    transform: [\n      {\n        rotate: '45deg',\n      },\n    ],\n  },\n\n  ends: {\n    width: 0,\n    height: DEFAULT_TEAR_SIZE * 1.5,\n    backgroundColor: DEFAULT_BACKGROUND_COLOR,\n    zIndex: 100,\n  },\n});\n"]}