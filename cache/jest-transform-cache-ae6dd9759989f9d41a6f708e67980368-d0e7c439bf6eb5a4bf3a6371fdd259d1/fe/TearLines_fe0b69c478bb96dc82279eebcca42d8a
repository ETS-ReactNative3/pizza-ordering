3b7d1b6d72e1a38d7488461727f2102f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _propTypes = _interopRequireDefault(require("prop-types"));

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var DEFAULT_TEAR_SIZE = 10;
var DEFAULT_TEAR_COLOR = '#FFFFFF';
var DEFAULT_BACKGROUND_COLOR = '#CCCCCC';

var TearLines = function (_React$Component) {
  (0, _inherits2.default)(TearLines, _React$Component);

  var _super = _createSuper(TearLines);

  function TearLines(props) {
    var _this;

    (0, _classCallCheck2.default)(this, TearLines);
    _this = _super.call(this, props);
    _this.state = {
      width: 0
    };
    _this.onLayout = _this.onLayout.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(TearLines, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.width !== undefined) {
        this.setState({
          width: this.props.width
        });
      }
    }
  }, {
    key: "onLayout",
    value: function onLayout(event) {
      this.setState({
        width: event.nativeEvent.layout.width
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var margin = -(this.props.tearSize || DEFAULT_TEAR_SIZE) * 1.5 / 2;
      return _react.default.createElement(_reactNative.View, {
        style: [styles.container, this.props.isUnder ? {
          marginTop: margin
        } : {
          marginBottom: margin
        }, this.props.style]
      }, _react.default.createElement(_reactNative.View, {
        style: [styles.ends, styles.leftEnds, this.props.tearSize && {
          width: this.props.tearSize,
          height: this.props.tearSize * 1.5
        }, this.props.backgroundColor && {
          backgroundColor: this.props.backgroundColor
        }, {
          marginRight: -this.offset
        }]
      }), new Array(this.tiles).fill().map(function (e, i) {
        return _react.default.createElement(_reactNative.View, {
          key: "tear-" + i,
          style: [styles.tear, _this2.props.tearSize && {
            width: _this2.props.tearSize,
            height: _this2.props.tearSize
          }, _this2.props.color && {
            backgroundColor: _this2.props.color
          }]
        });
      }), _react.default.createElement(_reactNative.View, {
        style: [styles.ends, styles.rightEnds, this.props.tearSize && {
          width: this.props.tearSize,
          height: this.props.tearSize * 1.5
        }, this.props.backgroundColor && {
          backgroundColor: this.props.backgroundColor
        }, {
          marginLeft: -this.offset
        }]
      }));
    }
  }, {
    key: "tiles",
    get: function get() {
      return Math.ceil(this._rawTiles);
    }
  }, {
    key: "_rawTiles",
    get: function get() {
      return this.state.width / (this.props.tearSize || DEFAULT_TEAR_SIZE);
    }
  }, {
    key: "offset",
    get: function get() {
      return (this.tiles - this._rawTiles) * (this.props.tearSize || DEFAULT_TEAR_SIZE) / 2;
    }
  }]);
  return TearLines;
}(_react.default.Component);

exports.default = TearLines;
TearLines.propTypes = {
  isUnder: _propTypes.default.bool,
  tearSize: _propTypes.default.number,
  color: _propTypes.default.string,
  backgroundColor: _propTypes.default.string,
  width: _propTypes.default.number
};

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-start',
    alignSelf: 'center',
    overflow: 'hidden',
    elevation: 100
  },
  tear: {
    width: DEFAULT_TEAR_SIZE,
    height: DEFAULT_TEAR_SIZE,
    backgroundColor: DEFAULT_TEAR_COLOR,
    transform: [{
      rotate: '45deg'
    }]
  },
  ends: {
    width: 0,
    height: DEFAULT_TEAR_SIZE * 1.5,
    backgroundColor: DEFAULT_BACKGROUND_COLOR,
    zIndex: 100
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,