d50d1e708f7d700b66b04f2a432078dc
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _getAPI = _interopRequireDefault(require("../repository/getAPI.js"));

var _reactNative = require("react-native");

var _reactNativePickerSelect = _interopRequireDefault(require("react-native-picker-select"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _SplashScreen = _interopRequireDefault(require("../screens/SplashScreen.js"));

var _reactRedux = require("react-redux");

var _dimension = require("../resources/dimension.js");

var _textStyle = require("../resources/textStyle.js");

var _FontAwesome = _interopRequireDefault(require("react-native-vector-icons/FontAwesome"));

var _FontAwesome2 = _interopRequireDefault(require("react-native-vector-icons/FontAwesome5"));

var _actions = require("../redux/actions.js");

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var mockData = [{
  _id: '5e9e969745787b2cc452754f',
  title: 'Size M',
  price: '1',
  type: 'Size',
  product: '5e9e969745787b2cc452752f'
}, {
  _id: '5e9e969745787b2cc452754f',
  title: 'Size L',
  price: '2',
  type: 'Size',
  product: '5e9e969745787b2cc452752f'
}, {
  _id: '5e9e969745787b2cc452754f',
  title: 'Thin Crust',
  price: '1.5',
  type: 'Crust',
  product: '5e9e969745787b2cc452752f'
}, {
  _id: '5e9e969745787b2cc452754f',
  title: 'Thick Crust',
  price: '2.5',
  type: 'Crust',
  product: '5e9e969745787b2cc452752f'
}, {
  _id: '5e9e969745787b2cc452754f',
  title: 'Shrimp',
  price: '1',
  type: 'Topping',
  product: '5e9e969745787b2cc452752f'
}, {
  _id: '5e9e969745787b2cc452754f',
  title: 'Onion',
  price: '2',
  type: 'Topping',
  product: '5e9e969745787b2cc452752f'
}, {
  _id: '5e9e969745787b2cc452754f',
  title: 'Pine Apple',
  price: '3',
  type: 'Topping',
  product: '5e9e969745787b2cc452752f'
}];

var OrderPanel = function (_Component) {
  (0, _inherits2.default)(OrderPanel, _Component);

  var _super = _createSuper(OrderPanel);

  function OrderPanel() {
    var _this;

    (0, _classCallCheck2.default)(this, OrderPanel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      isLoading: true,
      data: [],
      sizeArray: [],
      crustArray: [],
      toppingArray: [],
      size: '',
      crust: '',
      topping: [],
      quantity: '1'
    };

    _this.getProductOption = function _callee() {
      var _this$props, productData, modifiedOrderLineIndex, oldState, _id, response, data;

      return _regenerator.default.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this$props = _this.props, productData = _this$props.productData, modifiedOrderLineIndex = _this$props.modifiedOrderLineIndex, oldState = _this$props.oldState;
              _id = productData._id;
              _context.prev = 2;
              _context.next = 5;
              return _regenerator.default.awrap((0, _getAPI.default)("/product/" + _id + "/option"));

            case 5:
              response = _context.sent;

              if (modifiedOrderLineIndex === undefined) {
                _this.setState({
                  data: response.data,
                  size: '',
                  crust: '',
                  topping: [],
                  quantity: '1'
                });
              } else {
                _this.setState({
                  data: response.data,
                  size: oldState.size,
                  crust: oldState.crust,
                  topping: oldState.topping,
                  quantity: oldState.quantity
                });
              }

              _context.next = 13;
              break;

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](2);
              alert(_context.t0);
              console.log(_context.t0);

            case 13:
              data = JSON.parse(JSON.stringify(_this.state.data));

              _this.filterOptionByType(data);

              _this.setState({
                isLoading: false
              });

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, [[2, 9]], Promise);
    };

    _this.filterOptionByType = function (data) {
      var sizeArray = data.filter(function (unitData) {
        return unitData.type === 'Size';
      });
      var crustArray = data.filter(function (unitData) {
        return unitData.type === 'Crust';
      });
      var toppingArray = data.filter(function (unitData) {
        return unitData.type === 'Topping';
      });

      _this.setState({
        sizeArray: sizeArray,
        crustArray: crustArray,
        toppingArray: toppingArray
      });
    };

    _this.showSize = function (_ref) {
      var item = _ref.item;
      var title = item.title,
          price = item.price;
      var size = _this.state.size;

      if (size === title) {
        return _react.default.createElement(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            return _this.setState({
              size: title
            });
          },
          style: _dimension.dimensionStyles.SizePicker
        }, _react.default.createElement(_reactNative.Text, {
          style: _textStyle.textStyle.SizeText
        }, title), _react.default.createElement(_reactNative.Text, {
          style: _textStyle.textStyle.SizeText
        }, "Price: +", price, "$"), _react.default.createElement(_reactNative.View, {
          style: _dimension.dimensionStyles.checkIcon
        }, _react.default.createElement(_FontAwesome2.default, {
          name: "check",
          size: 13,
          color: "#FFFFFF"
        })));
      } else {
        return _react.default.createElement(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            return _this.setState({
              size: title
            });
          },
          style: _dimension.dimensionStyles.SizePickerUnpick
        }, _react.default.createElement(_reactNative.Text, {
          style: _textStyle.textStyle.SizeTextUnpick
        }, title), _react.default.createElement(_reactNative.Text, {
          style: _textStyle.textStyle.SizeTextUnpick
        }, "Price: +", price, "$"));
      }
    };

    _this.showCrust = function (_ref2) {
      var item = _ref2.item;
      var title = item.title,
          price = item.price;
      var crust = _this.state.crust;

      if (crust === title) {
        return _react.default.createElement(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            return _this.setState({
              crust: title
            });
          },
          style: _dimension.dimensionStyles.SizePicker
        }, _react.default.createElement(_reactNative.Text, {
          style: _textStyle.textStyle.SizeText
        }, title), _react.default.createElement(_reactNative.Text, {
          style: _textStyle.textStyle.SizeText
        }, "Price: +", price, "$"), _react.default.createElement(_reactNative.View, {
          style: _dimension.dimensionStyles.checkIcon
        }, _react.default.createElement(_FontAwesome2.default, {
          name: "check",
          size: 13,
          color: "#FFFFFF"
        })));
      } else {
        return _react.default.createElement(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            return _this.setState({
              crust: title
            });
          },
          style: _dimension.dimensionStyles.SizePickerUnpick
        }, _react.default.createElement(_reactNative.Text, {
          style: _textStyle.textStyle.SizeTextUnpick
        }, title), _react.default.createElement(_reactNative.Text, {
          style: _textStyle.textStyle.SizeTextUnpick
        }, "Price: +", price, "$"));
      }
    };

    _this.showTopping = function (_ref3) {
      var item = _ref3.item;
      var title = item.title,
          price = item.price;
      var topping = (0, _toConsumableArray2.default)(_this.state.topping);
      var checkInclude = topping.includes(title);

      if (checkInclude === true) {
        return _react.default.createElement(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            var index = topping.findIndex(function (unitData) {
              return unitData === title;
            });
            topping.splice(index, 1);

            _this.setState({
              topping: topping
            });
          },
          style: _dimension.dimensionStyles.SizePicker
        }, _react.default.createElement(_reactNative.Text, {
          style: _textStyle.textStyle.SizeText
        }, title), _react.default.createElement(_reactNative.Text, {
          style: _textStyle.textStyle.SizeText
        }, "Price: +", price, "$"), _react.default.createElement(_reactNative.View, {
          style: _dimension.dimensionStyles.checkIcon
        }, _react.default.createElement(_FontAwesome2.default, {
          name: "check",
          size: 13,
          color: "#FFFFFF"
        })));
      } else {
        return _react.default.createElement(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            topping.push(title);

            _this.setState({
              topping: topping
            });
          },
          style: _dimension.dimensionStyles.SizePickerUnpick
        }, _react.default.createElement(_reactNative.Text, {
          style: _textStyle.textStyle.SizeTextUnpick
        }, title), _react.default.createElement(_reactNative.Text, {
          style: _textStyle.textStyle.SizeTextUnpick
        }, "Price: +", price, "$"));
      }
    };

    _this.calculatePrice = function () {
      var productData = _this.props.productData;
      var price = productData.price;
      var totalPrice = price;
      var _this$state = _this.state,
          sizeArray = _this$state.sizeArray,
          crustArray = _this$state.crustArray,
          toppingArray = _this$state.toppingArray,
          size = _this$state.size,
          crust = _this$state.crust,
          topping = _this$state.topping,
          quantity = _this$state.quantity;
      var sizeOption = sizeArray.find(function (unitData) {
        return unitData.title === size;
      });

      if (sizeOption !== undefined) {
        totalPrice = eval(totalPrice + "+" + sizeOption.price);
      }

      var crustOption = crustArray.find(function (unitData) {
        return unitData.title === crust;
      });

      if (crustOption !== undefined) {
        totalPrice = eval(totalPrice + "+" + crustOption.price);
      }

      topping.forEach(function (toppingUnit) {
        var toppingOption = toppingArray.find(function (unitData) {
          return unitData.title === toppingUnit;
        });

        if (toppingOption !== undefined) {
          totalPrice = eval(totalPrice + "+" + toppingOption.price);
        }
      });
      totalPrice = eval(totalPrice + "*" + quantity);
      return totalPrice;
    };

    _this.createOrderLine = function (totalPrice) {
      var addToCart = _this.props.addToCart;
      var productData = _this.props.productData;
      var _this$state2 = _this.state,
          sizeArray = _this$state2.sizeArray,
          crustArray = _this$state2.crustArray,
          toppingArray = _this$state2.toppingArray,
          size = _this$state2.size,
          crust = _this$state2.crust,
          topping = _this$state2.topping,
          quantity = _this$state2.quantity;
      var orderLine = {};
      orderLine.product = productData._id;
      orderLine.optionArray = [];
      var sizeOption = sizeArray.find(function (unitData) {
        return unitData.title === size;
      });

      if (sizeOption !== undefined) {
        orderLine.optionArray.push(sizeOption);
      }

      var crustOption = crustArray.find(function (unitData) {
        return unitData.title === crust;
      });

      if (crustOption !== undefined) {
        orderLine.optionArray.push(crustOption);
      }

      topping.forEach(function (toppingUnit) {
        var toppingOption = toppingArray.find(function (unitData) {
          return unitData.title === toppingUnit;
        });

        if (toppingOption !== undefined) {
          orderLine.optionArray.push(toppingOption);
        }
      });
      orderLine.quantity = Number(quantity);
      var oldState = {
        size: size,
        crust: crust,
        topping: topping,
        quantity: quantity
      };
      orderLine.productData = productData;
      orderLine.productPrice = Number(totalPrice);
      orderLine.oldState = oldState;
      var _this$props2 = _this.props,
          modifiedOrderLineIndex = _this$props2.modifiedOrderLineIndex,
          modifyOrderLine = _this$props2.modifyOrderLine;

      if (modifiedOrderLineIndex === undefined) {
        addToCart(orderLine);
      } else {
        modifyOrderLine(orderLine, modifiedOrderLineIndex);
      }
    };

    return _this;
  }

  (0, _createClass2.default)(OrderPanel, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          modalVisible = _this$props3.modalVisible,
          onClose = _this$props3.onClose,
          RequestClose = _this$props3.RequestClose,
          productData = _this$props3.productData;
      var imageUrl = productData.imageUrl,
          title = productData.title;
      var _this$state3 = this.state,
          sizeArray = _this$state3.sizeArray,
          crustArray = _this$state3.crustArray,
          toppingArray = _this$state3.toppingArray,
          quantity = _this$state3.quantity,
          size = _this$state3.size,
          crust = _this$state3.crust;
      var totalPrice = this.calculatePrice();
      var modifiedOrderLineIndex = this.props.modifiedOrderLineIndex;
      return _react.default.createElement(_reactNative.Modal, {
        animationType: "none",
        transparent: true,
        visible: modalVisible,
        onRequestClose: function onRequestClose() {
          RequestClose();

          _this2.setState({
            isLoading: true
          });
        },
        onShow: this.getProductOption
      }, this.state.isLoading ? _react.default.createElement(_reactNative.View, {
        style: _dimension.dimensionStyles.OrderPanel
      }, _react.default.createElement(_SplashScreen.default, null)) : _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.View, {
        style: _dimension.dimensionStyles.OrderPanel
      }, _react.default.createElement(_reactNative.ScrollView, null, _react.default.createElement(_reactNative.TouchableOpacity, {
        onPress: function onPress() {
          onClose();

          _this2.setState({
            isLoading: true
          });
        },
        style: _dimension.dimensionStyles.XIconOrderPanel
      }, _react.default.createElement(_FontAwesome.default, {
        name: "close",
        size: 30,
        color: "#e5293e"
      })), _react.default.createElement(_reactNative.Image, {
        style: _dimension.dimensionStyles.ImageOrderPanel,
        source: {
          uri: imageUrl
        },
        resizeMode: "cover"
      }), _react.default.createElement(_reactNative.Text, {
        numberOfLines: 2,
        style: _textStyle.textStyle.ProductDetailName
      }, title), sizeArray.length !== 0 ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.Text, {
        numberOfLines: 1,
        style: _textStyle.textStyle.ModifyType
      }, "Size"), _react.default.createElement(_reactNative.View, {
        style: _dimension.dimensionStyles.SizeModifyContainer
      }, _react.default.createElement(_reactNative.FlatList, {
        horizontal: true,
        showsVerticalScrollIndicator: false,
        showsHorizontalScrollIndicator: false,
        data: sizeArray,
        keyExtractor: function keyExtractor(item) {
          return item.title;
        },
        renderItem: this.showSize
      }))) : null, crustArray.length !== 0 ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.Text, {
        numberOfLines: 1,
        style: _textStyle.textStyle.ModifyType
      }, "Crust"), _react.default.createElement(_reactNative.View, {
        style: _dimension.dimensionStyles.SizeModifyContainer
      }, _react.default.createElement(_reactNative.FlatList, {
        horizontal: true,
        showsVerticalScrollIndicator: false,
        showsHorizontalScrollIndicator: false,
        data: crustArray,
        keyExtractor: function keyExtractor(item) {
          return item.title;
        },
        renderItem: this.showCrust
      }))) : null, toppingArray.length !== 0 ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.Text, {
        numberOfLines: 1,
        style: _textStyle.textStyle.ModifyType
      }, "Topping"), _react.default.createElement(_reactNative.View, {
        style: _dimension.dimensionStyles.SizeModifyContainer
      }, _react.default.createElement(_reactNative.FlatList, {
        horizontal: true,
        showsVerticalScrollIndicator: false,
        showsHorizontalScrollIndicator: false,
        data: toppingArray,
        keyExtractor: function keyExtractor(item) {
          return item.title;
        },
        renderItem: this.showTopping
      }))) : null, _react.default.createElement(_reactNative.Text, {
        numberOfLines: 1,
        style: _textStyle.textStyle.ModifyType
      }, "Quantity"), _react.default.createElement(_reactNative.View, {
        style: _dimension.dimensionStyles.quantityPicker
      }, _react.default.createElement(_reactNativePickerSelect.default, {
        useNativeAndroidPickerStyle: false,
        placeholder: {
          label: "Just now: " + quantity,
          value: quantity
        },
        textInputProps: {
          textAlign: 'center',
          fontSize: 17
        },
        onValueChange: function onValueChange(value) {
          return _this2.setState({
            quantity: value
          });
        },
        items: [{
          label: '1',
          value: '1'
        }, {
          label: '2',
          value: '2'
        }, {
          label: '3',
          value: '3'
        }, {
          label: '4',
          value: '4'
        }, {
          label: '5',
          value: '5'
        }, {
          label: '6',
          value: '6'
        }, {
          label: '7',
          value: '7'
        }, {
          label: '8',
          value: '8'
        }, {
          label: '9',
          value: '9'
        }, {
          label: '10',
          value: '10'
        }]
      })), _react.default.createElement(_reactNative.View, {
        style: _dimension.dimensionStyles.separateLine
      }), _react.default.createElement(_reactNative.View, {
        style: _dimension.dimensionStyles.PriceContainer
      }, _react.default.createElement(_reactNative.Text, {
        numberOfLines: 1,
        style: _textStyle.textStyle.ModifyType
      }, "Price:"), _react.default.createElement(_reactNative.Text, {
        numberOfLines: 1,
        style: _textStyle.textStyle.ModifyType
      }, totalPrice, "$")), _react.default.createElement(_reactNative.View, {
        style: _dimension.dimensionStyles.separateLine
      }), modifiedOrderLineIndex === undefined ? _react.default.createElement(_reactNative.TouchableOpacity, {
        style: _dimension.dimensionStyles.addToCartButton,
        onPress: function onPress() {
          if (sizeArray.length !== 0 && size === '') {
            alert('Please pick size');
          } else if (crustArray.length !== 0 && crust === '') {
            alert('Please pick crust');
          } else {
            _this2.createOrderLine(totalPrice);

            RequestClose();

            _this2.setState({
              isLoading: true
            });
          }
        }
      }, _react.default.createElement(_reactNative.Text, {
        style: _textStyle.textStyle.orderNowButton
      }, "ADD TO CART")) : _react.default.createElement(_reactNative.TouchableOpacity, {
        style: _dimension.dimensionStyles.addToCartButton,
        onPress: function onPress() {
          if (sizeArray.length !== 0 && size === '') {
            alert('Please pick size');
          } else if (crustArray.length !== 0 && crust === '') {
            alert('Please pick crust');
          } else {
            _this2.createOrderLine(totalPrice);

            RequestClose();

            _this2.setState({
              isLoading: true
            });
          }
        }
      }, _react.default.createElement(_reactNative.Text, {
        style: _textStyle.textStyle.orderNowButton
      }, "MODIFY"))))));
    }
  }]);
  return OrderPanel;
}(_react.Component);

OrderPanel.propTypes = {
  modalVisible: _propTypes.default.bool,
  onClose: _propTypes.default.func,
  productData: _propTypes.default.object,
  RequestClose: _propTypes.default.func,
  oldState: _propTypes.default.object,
  modifiedOrderLineIndex: _propTypes.default.number
};

var mapStateToProps = function mapStateToProps(state) {
  return {};
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    addToCart: function addToCart(orderLine) {
      return dispatch((0, _actions.addToCart)(orderLine));
    },
    modifyOrderLine: function modifyOrderLine(orderLine, modifiedOrderLineIndex) {
      return dispatch((0, _actions.modifyOrderLine)(orderLine, modifiedOrderLineIndex));
    }
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(OrderPanel);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,